# Pre-Facet Calibration Pipeline
#
# Basic Pre-Facet Calibration Pipeline:
# - no demixing but A-team flagging,
# - only averaging target data after calibration transfer
# - consecutive subband-numbers in the data need to be consecutive subband-frequencies
# - the new "error_tolerance" option requires LOFAR software version >= 2.15
#   (Comment out all lines with "error_tolerance" if you want to use an older version.)
# - expects shared filesystem, that all nodes can reach all files!
#   (E.g. a single workstation or compute cluster with shared filesystem
#   doesn't work on multiple nodes on CEP-2 or CEP3.)

### First run this and check the generated plots! Modify and re-run if neccessary.
#pipeline.steps=[createmap_cal, ndppp_prep_cal, calib_cal, h5_imp_map, h5imp_cal, fitclock, ampl, plots, phase]
### When calibrator processing is done, you can do the processing of the target data.
### Either by using the same pipeline and running this:
pipeline.steps=[ createmap_cal, ndppp_prep_cal, calib_cal, h5_imp_map, h5imp_cal, fitclock, ampl, plots, phase, createmap_target, ndppp_prep_target, trans, parmmap, calibtarget, dpppaverage, ateamtarget, ateamcliptar, sortmap_tar, dpppconcat]#, gsmcalibtarget, gsmcal_parmmap, plot_gsm_phases, make_results_mapfile, move_results, createmap_plots, copy_plots]
#pipeline.steps=[createmap_target, ndppp_prep_target, dpppaverage, sortmap_tar, dpppconcat,b2n_cal_gsmcalibtarget,b2n_apl_gsmcalibtarget]#, gsmcalibtarget, gsmcal_parmmap, plot_gsm_phases, make_results_mapfile, move_results, createmap_plots, copy_plots]
#pipeline.steps=[createmap_target, ndppp_prep_target, dpppaverage, sortmap_tar, dpppconcat,b2n_cal_parmmapinst,b2n_cal_gsmcalibtarget,b2n_apl_gsmcalibtarget, plot_gsm_phases, make_results_mapfile, move_results, createmap_plots, copy_plots]
### Or by copying the *.npy files from the calibrator and running this:
# pipeline.steps=[createmap_target, ndppp_prep_target, trans, parmmap, calibtarget, dpppaverage, ateamtarget, ateamcliptar, sortmap_tar, dpppconcat, gsmcalibtarget, gsmcal_parmmap, plot_gsm_phases, make_results_mapfile, move_results, createmap_plots, copy_plots]


# parameters you will need to adjust.
! avg_timestep         = 2  # mode f ie pr 10sec reso ; q a 2sec now # averaging step needed to average the data to 4 seconds time resolution
! avg_freqstep         = 2  # mode f ie pr 2ch/SB; q a 16ch now 	# averaging step needed to average the data to 4 ch/SB frequency resolution
! cal_input_path       = /data/scratch/carosko/cycle0/factor/data/ori/calib_ext_tps/
! cal_input_pattern    = L*.MS
! calibrator_skymodel  = /home/carosko/bbs2ndpp/bbs2ndpp_prefactor/skymodels/3c295-twocomp.skymodel	###/cep3home/username/Pre-Facet-Cal/skymodels/PleaseProvideCalibrator.skymodel
! target_input_path    = /data/scratch/carosko/cycle0/factor/data/ori/cast_40SB_ext_tps/
! target_input_pattern = TL*.MS
#### [skymodel have to be a sourcedb file]!!!!!!!!!!!!!!!!!!!!!!!
#! target_skymodel      = /home/carosko/bbs2ndpp/bbs2ndpp_prefactor/skymodels/3c295-twocomp.skymodel	 #### !!!!!!!!!!!!!!!!!!!#/cep3home/username/Pre-Facet-Cal/skymodels/PleaseProvideTarget.skymodel
! target_skymodel      = /home/carosko/bbs2ndpp/bbs2ndpp_prefactor/skymodels/3c295-twocomp.sourcedb
! num_SBs_per_group    = 10 # make concatenated measurement-sets with that many subbands
! results_directory    = /data/scratch/carosko/cycle0/factor/resultat/b2n_qn_kutt/ #/media/scratch/test/username/WhereYouWantYourProcessedData/

# pathes to the scripts etc.
# #### ToDo: get the scripts onto CEP3 and adjust the pathes here!
! calib_cal_parset     = /home/carosko/tier/source/prefactor/parsets/calibcal.parset
! cal_transfer_parset  = /home/carosko/tier/source/prefactor/parsets/applyparmdb.parset
! ATeam_predict_parset = /home/carosko/tier/source/prefactor/parsets/ateamclip.parset
! gsm_cal_parset       = /home/carosko/tier/source/prefactor/parsets/gsmcal.parset
! ATeam_skymodel       = /home/carosko/tier/source/prefactor/skymodels/Ateam_LBA_CC.skymodel
! losoto_importer      = /home/carosko/tier/source/prefactor/bin/losotoImporter.py
! fitclock_script      = /home/carosko/tier/source/prefactor/bin/fit_clocktec_initialguess_losoto.py
! fitamps_script       = /home/carosko/tier/source/prefactor/bin/amplitudes_losoto_3.py
! plotsols_script      = /home/carosko/tier/source/prefactor/bin/examine_npys.py
! fit_XYoffset_script  = /home/carosko/tier/source/prefactor/bin/find_cal_global_phaseoffset_losoto.py
! transfer_script      = /home/carosko/tier/source/prefactor/bin/transfer_amplitudes+clock+offset_toMS.py
! ATeam_Clipper        = /home/carosko/tier/source/prefactor/bin/Ateamclipper.py
! plotphases_script    = /home/carosko/tier/source/prefactor/bin/plot_solutions_all_stations.py
! flagging_strategy    = /opt/cep/lofar/lofar_versions/LOFAR-Release-2_12_0/lofar_build/install/gnu_opt/share/rfistrategies/HBAdefault

# set this to True if you want the pipeline run to continue if single bands fail
! error_tolerance           =  False

# generate a mapfile of all the calibrator data
createmap_cal.control.kind            =   plugin
createmap_cal.control.type            =   createMapfile
createmap_cal.control.method          =   mapfile_from_folder
createmap_cal.control.mapfile_dir     =   input.output.mapfile_dir
createmap_cal.control.filename        =   createmap_cal.mapfile
createmap_cal.control.folder          =   {{ cal_input_path }}
createmap_cal.control.pattern         =   {{ cal_input_pattern }}

# run NDPPP on the calibrator data
ndppp_prep_cal.control.type                    = dppp
ndppp_prep_cal.control.max_per_node            = 10                   # \ feel free to adjust these two values to match your system
ndppp_prep_cal.control.environment             = {OMP_NUM_THREADS: 4} # / they should be reasonable for CEP3
ndppp_prep_cal.control.error_tolerance         = {{ error_tolerance }}
ndppp_prep_cal.argument.msin                   = createmap_cal.output.mapfile    # The input data.
ndppp_prep_cal.argument.msin.datacolumn        = DATA
ndppp_prep_cal.argument.msin.baseline          = CS*&; RS*&; CS*&RS*
ndppp_prep_cal.argument.msout.datacolumn       = DATA
ndppp_prep_cal.argument.msout.writefullresflag = False
ndppp_prep_cal.argument.steps                  = [flag,filter,avg,flagamp]
ndppp_prep_cal.argument.flag.type              = preflagger
ndppp_prep_cal.argument.flag.baseline          = []	#[ CS013HBA* ]            # feel free to change that, but CS013 is usually bad.
ndppp_prep_cal.argument.filter.type            = filter
ndppp_prep_cal.argument.filter.baseline        = CS*, RS*&&
ndppp_prep_cal.argument.filter.remove          = true                     # fully kick out the international stations.
ndppp_prep_cal.argument.avg.type               = average
ndppp_prep_cal.argument.avg.timestep           = {{ avg_timestep }}       # average to 4 second intervals , PLEASE ADJUST!
ndppp_prep_cal.argument.avg.freqstep           = {{ avg_freqstep }}       # average to 2 ch/SB , PLEASE ADJUST!
ndppp_prep_cal.argument.flagamp.type           = preflagger
ndppp_prep_cal.argument.flagamp.amplmin        = 1e-30

#now run BBS on the NDPPP-ed calibrator data.
calib_cal.control.type             =  python-calibrate-stand-alone  
calib_cal.control.max_per_node     =  24                         # feel free to adjust this value to match your system  
calib_cal.control.error_tolerance  =  {{ error_tolerance }}
calib_cal.argument.force           =  True 
calib_cal.argument.observation     =  ndppp_prep_cal.output.mapfile  # mapfile for the NDPPP-ed calibrator data
calib_cal.argument.parset          =  {{ calib_cal_parset }}  
calib_cal.argument.catalog         =  {{ calibrator_skymodel }}     

# generate a mapfile with all files in a single entry
h5_imp_map.control.kind               =  plugin
h5_imp_map.control.type               =  createMapfile
h5_imp_map.control.method             =  mapfile_all_to_one
h5_imp_map.control.mapfile_in         =  ndppp_prep_cal.output.mapfile
h5_imp_map.control.mapfile_dir        =  input.output.mapfile_dir
h5_imp_map.control.filename           =  h5_imp_map.mapfile

# import all instrument tables into one LoSoTo file
h5imp_cal.control.type            =  pythonplugin
h5imp_cal.control.executable      =  {{ losoto_importer }}
h5imp_cal.argument.flags          =  [h5_imp_map.output.mapfile,h5imp_cal_losoto.h5]
h5imp_cal.argument.instrument     =  /instrument
h5imp_cal.argument.solsetName     =  sol000
h5imp_cal.argument.compression    =  7

# now run the script that does the clock-TEC fitting
fitclock.control.kind             = recipe
fitclock.control.type             = executable_args
fitclock.control.mapfile_in       = h5imp_cal.output.h5parm.mapfile
fitclock.control.executable       = {{ fitclock_script }}
# order for arguments is: [<input-filename>,<output-filename-base>,<NumThreads>]
fitclock.control.arguments        = [h5gvds,caldata_transfer,24]
fitclock.control.inputkey         = h5gvds

# now run the script that filters the amplitudes
ampl.control.kind             = recipe
ampl.control.type             = executable_args
ampl.control.mapfile_in       = h5imp_cal.output.h5parm.mapfile
ampl.control.executable       = {{ fitamps_script }}
# order for arguments is: [<input-filename>,<output-filename-base>,<num-ch/SB>,<subbans-to-flag>]
# subbans-to-flag = semicolon-sperated list of integers in double-quotes
# e.g.: ampl.control.arguments   = [h5gvds,caldata_transfer,4,"205;206;207"]
ampl.control.arguments        = [h5gvds,caldata_transfer,4,""]
ampl.control.inputkey         = h5gvds

# and generate some output plots
plots.control.kind             = recipe
plots.control.type             = executable_args
plots.control.mapfile_in       = h5imp_cal.output.h5parm.mapfile
plots.control.executable       = {{ plotsols_script }}
plots.control.skip_infile      = True
plots.control.arguments        = [caldata_transfer]   # Needs "<output-filename-base>" from the fitclock and ampl steps

# fit the phase difference between X and Y
phase.control.type            = pythonplugin
phase.control.executable      = {{ fit_XYoffset_script }}
# order for flags is: [<input-filename>,<output-filename-base>]
phase.argument.flags          = [h5imp_cal.output.h5parm.mapfile,caldata_transfer]


# ############################################################################################################
# # Stop processing here and check the plots generated by the previous steps! Only then continue processing. #
# ############################################################################################################


# generate a mapfile of all the target data
createmap_target.control.kind            =   plugin
createmap_target.control.type            =   createMapfile
createmap_target.control.method          =   mapfile_from_folder
createmap_target.control.mapfile_dir     =   input.output.mapfile_dir
createmap_target.control.filename        =   createmap_target.mapfile
createmap_target.control.folder          =   {{ target_input_path }}
createmap_target.control.pattern         =   {{ target_input_pattern }}

# run NDPPP on the target data
ndppp_prep_target.control.type                    = dppp
ndppp_prep_target.control.max_per_node            = 10                   # \ feel free to adjust these two values to match your system
ndppp_prep_target.control.environment             = {OMP_NUM_THREADS: 4} # / they should be reasonable for CEP3
ndppp_prep_target.control.error_tolerance         = {{ error_tolerance }}
ndppp_prep_target.argument.msin                   = createmap_target.output.mapfile    # The input data.
ndppp_prep_target.argument.msin.datacolumn        = DATA
ndppp_prep_target.argument.msin.baseline          = CS*&; RS*&; CS*&RS*
ndppp_prep_target.argument.msout.datacolumn       = DATA
ndppp_prep_target.argument.msout.writefullresflag = False
ndppp_prep_target.argument.steps                  = [flag,filter,flagamp]
ndppp_prep_target.argument.flag.type              = preflagger
ndppp_prep_target.argument.flag.baseline          = []	#[ CS013HBA* ]            # feel free to change that, but CS013 is usually bad.
ndppp_prep_target.argument.filter.type            = filter
ndppp_prep_target.argument.filter.baseline        = CS*, RS*&&
ndppp_prep_target.argument.filter.remove          = true                     # fully kick out the international stations.
ndppp_prep_target.argument.flagamp.type           = preflagger
ndppp_prep_target.argument.flagamp.amplmin        = 1e-30

# generate parmDB with the interpolated calibrator data to apply to the traget
trans.control.type            = pythonplugin
trans.control.executable      = {{ transfer_script }}
trans.control.max_per_node    =  20                                 # feel free to adjust this value to match your system
trans.control.error_tolerance = {{ error_tolerance }}
# order for flags is: [<input-filenames>,<output-filename-base>,<extension_for_new_parmDBs>]
trans.argument.flags          = [ndppp_prep_target.output.mapfile,caldata_transfer,/instrument_amp_clock_offset]

# generate mapfile with the parmDBs to be applied to the target data
parmmap.control.kind               =  plugin
parmmap.control.type               =  createMapfile
parmmap.control.method             =  add_suffix_to_file
parmmap.control.mapfile_in         =  ndppp_prep_target.output.mapfile
parmmap.control.add_suffix_to_file =  /instrument_amp_clock_offset
parmmap.control.mapfile_dir        =  input.output.mapfile_dir
parmmap.control.filename           =  targetparmdb.mapfile

# run BBS to apply the calibrator values to the target data
calibtarget.control.type             =  python-calibrate-stand-alone  
calibtarget.control.max_per_node     =  24 #10 #pb swaping et error node sur shared #24                                 # feel free to adjust this value to match your system  
calibtarget.control.error_tolerance  = {{ error_tolerance }}
calibtarget.argument.observation     =  ndppp_prep_target.output.mapfile   # mapfile for the NDPPP-ed target data
calibtarget.argument.parset          =  {{ cal_transfer_parset }}
calibtarget.argument.parmdb          =  parmmap.output.mapfile
calibtarget.argument.replace-parmdb  =  True

# run NDPPP again to flag and average some more.
dpppaverage.control.type                    = dppp
dpppaverage.control.max_per_node            = 12                   # \ feel free to adjust these two values to match your system
dpppaverage.control.environment             = {OMP_NUM_THREADS: 4} # / they should be reasonable for CEP3
dpppaverage.control.error_tolerance         = {{ error_tolerance }}
dpppaverage.argument.msin                   = ndppp_prep_target.output.mapfile  # The input data.
dpppaverage.argument.msin.datacolumn        = CORRECTED_DATA
dpppaverage.argument.msout.datacolumn       = DATA
dpppaverage.argument.msout.writefullresflag = False
dpppaverage.argument.steps                  = [count,flag,count,avg]
dpppaverage.argument.flag.type              = aoflagger
dpppaverage.argument.flag.keepstatistics    = false
dpppaverage.argument.flag.memoryperc        = 10
dpppaverage.argument.flag.strategy          = {{ flagging_strategy }}
dpppaverage.argument.avg.type               = average
dpppaverage.argument.avg.timestep           = {{ avg_timestep }}       # average to 8 second intervals , PLEASE ADJUST!
dpppaverage.argument.avg.freqstep           = {{ avg_freqstep }}       # average to 2 ch/SB , PLEASE ADJUST!

# run BBS to predict the A-Team contribution
ateamtarget.control.type             =  python-calibrate-stand-alone  
ateamtarget.control.max_per_node     =  20                          # feel free to adjust this value to match your system  
ateamtarget.control.error_tolerance  =  {{ error_tolerance }}
ateamtarget.argument.force           =  True 
ateamtarget.argument.observation     =  dpppaverage.output.mapfile
ateamtarget.argument.parset          =  {{ ATeam_predict_parset }}  
ateamtarget.argument.catalog         =  {{ ATeam_skymodel }}     

# run the a-team clipper to flag data affected by the a-team
ateamcliptar.control.kind               =  recipe
ateamcliptar.control.type               =  executable_args
ateamcliptar.control.max_per_node       =  24
ateamcliptar.control.mapfile_in         =  dpppaverage.output.mapfile
ateamcliptar.control.executable         =  {{ ATeam_Clipper }}
ateamcliptar.control.error_tolerance    =  {{ error_tolerance }}
ateamcliptar.control.arguments          =  [allms]
ateamcliptar.control.inputkey           =  allms

# sort the target data into groups so that NDPPP can concatenate them
sortmap_tar.control.kind            =   plugin
sortmap_tar.control.type            =   groupMapfileObsSB
sortmap_tar.control.mapfile_dir     =   input.output.mapfile_dir
sortmap_tar.control.filename        =   sortmap_tar.mapfile
sortmap_tar.control.mapfile_in      =   dpppaverage.output.mapfile
sortmap_tar.control.numSB           =   {{ num_SBs_per_group }}
sortmap_tar.control.NDPPPfill       =   True
sortmap_tar.control.startFromZero   =   True   # This means that groups (and group-names) are done with SB000 as a reference
sortmap_tar.control.truncateLastSBs =   True   # This means that a excess subbands that don't make a full group get discarded

# run NDPPP to concatenate the target
dpppconcat.control.type                    =  dppp
dpppconcat.control.max_per_node            =  12
dpppconcat.control.error_tolerance         =  {{ error_tolerance }}
dpppconcat.control.mapfile_out             =  sortmap_tar.output.groupmap # tell the pipeline to give the output useful names
dpppconcat.control.mapfiles_in             =  [sortmap_tar.output.mapfile]
dpppconcat.control.inputkey                =  msin
dpppconcat.argument.msin.datacolumn        =  DATA
dpppconcat.argument.msin.missingdata       =  True    #\ these two lines will make NDPPP generate dummy data when
dpppconcat.argument.msin.orderms           =  False   #/ concatenating data
dpppconcat.argument.msout.datacolumn       =  DATA
dpppconcat.argument.msout.writefullresflag =  False
dpppconcat.argument.steps                  =  [flag]      # run the aoflagger (this used to be an extra step)
dpppconcat.argument.flag.type              =  aoflagger
dpppconcat.argument.flag.keepstatistics    =  false
dpppconcat.argument.flag.memoryperc        =  10
dpppconcat.argument.flag.strategy          =  {{ flagging_strategy }}


########################################################################
# phase calibration on the gsm skymodel
#gsmcalibtarget.control.type                            =  python-calibrate-stand-alone  
#gsmcalibtarget.control.max_per_node                    =  12  # feel free to adjust this to match your system  
#gsmcalibtarget.control.error_tolerance                 =  {{ error_tolerance }}
#gsmcalibtarget.argument.force                          =  True 
#gsmcalibtarget.argument.observation                    =  dpppconcat.output.mapfile
#gsmcalibtarget.argument.parmdb-name                    =  instrument_directionindependent
#gsmcalibtarget.argument.parset                         =  {{ gsm_cal_parset }}  
#gsmcalibtarget.argument.catalog                        =  {{ target_skymodel }}     
#gsmcalibtarget.argument.Step.solve.Solve.CellSize.Freq =  0  # default: solution-cell spans all frequency channels
#gsmcalibtarget.argument.Step.solve.Solve.CellSize.Time =  1  # default: one solution per time-step

# split in two step; cal and apply 
# Because :"Note that currently. the solution table is only written at the very end of DPPP, so that it is not possible to solve and apply the solutions in the same run of DPPP." (Cookbook v19 -p40)

# Create a map to tell ndppp to add in each MSs' group a "instrument_directionindependent" table (and not the default "instrument")
b2n_cal_parmmapinst.control.kind               =  plugin
b2n_cal_parmmapinst.control.type               =  createMapfile
b2n_cal_parmmapinst.control.method             =  add_suffix_to_file
b2n_cal_parmmapinst.control.mapfile_in         =  dpppconcat.output.mapfile
b2n_cal_parmmapinst.control.add_suffix_to_file =  /instrument_directionindependent
b2n_cal_parmmapinst.control.mapfile_dir        =  input.output.mapfile_dir
b2n_cal_parmmapinst.control.filename           =  parmdbst.mapfile


b2n_cal_gsmcalibtarget.control.type                    	= dppp
b2n_cal_gsmcalibtarget.control.max_per_node            	= 10                   
b2n_cal_gsmcalibtarget.control.environment             	= {OMP_NUM_THREADS: 4} 
b2n_cal_gsmcalibtarget.control.error_tolerance         	= {{ error_tolerance }}
b2n_cal_gsmcalibtarget.control.inplace					= True
b2n_cal_gsmcalibtarget.argument.msin                   = dpppconcat.output.mapfile    
b2n_cal_gsmcalibtarget.argument.msin.datacolumn        = DATA
b2n_cal_gsmcalibtarget.argument.msin.baseline          = CS*&; RS*&; CS*&RS*
b2n_cal_gsmcalibtarget.argument.msout.datacolumn       = CORRECTED_DATA
b2n_cal_gsmcalibtarget.argument.msout.writefullresflag  = False
b2n_cal_gsmcalibtarget.argument.steps                  	= [filter,gaincal]	
b2n_cal_gsmcalibtarget.filter.type		     	  		= filter
b2n_cal_gsmcalibtarget.filter.blrange		  			= [300, 999999] #### [in m]
b2n_cal_gsmcalibtarget.argument.gaincal.type	     	= gaincal
b2n_cal_gsmcalibtarget.argument.gaincal.maxiter        	= 500
b2n_cal_gsmcalibtarget.argument.gaincal.caltype	  		= phaseonly #diagonal #### [here we want phase only]
b2n_cal_gsmcalibtarget.argument.gaincal.nchan	  		= 0
b2n_cal_gsmcalibtarget.argument.gaincal.solint         	= 1
b2n_cal_gsmcalibtarget.argument.gaincal.sourcedb        = {{ target_skymodel }} #### have to be a sourcedb type 
b2n_cal_gsmcalibtarget.argument.gaincal.parmdb        	= b2n_cal_parmmapinst.output.mapfile 
b2n_cal_gsmcalibtarget.argument.gaincal.predict.usebeammodel = True
b2n_cal_gsmcalibtarget.argument.gaincal.predict.usechannelfreq= True
b2n_cal_gsmcalibtarget.argument.gaincal.predict.beammode = array_factor


b2n_apl_gsmcalibtarget.control.type                    	= dppp
b2n_apl_gsmcalibtarget.control.max_per_node            	= 10                   
b2n_apl_gsmcalibtarget.control.environment             	= {OMP_NUM_THREADS: 4} 
b2n_apl_gsmcalibtarget.control.error_tolerance         	= {{ error_tolerance }}
b2n_apl_gsmcalibtarget.control.inplace					= True
b2n_apl_gsmcalibtarget.argument.msin                   	= dpppconcat.output.mapfile 
b2n_apl_gsmcalibtarget.argument.msin.datacolumn        	= CORRECTED_DATA
b2n_apl_gsmcalibtarget.argument.msout.datacolumn       	= CORRECTED_DATA
b2n_apl_gsmcalibtarget.argument.msout.writefullresflag 	= False
b2n_apl_gsmcalibtarget.argument.steps                  	= [applycal, applybeam]	####
b2n_apl_gsmcalibtarget.argument.applycal.type	     	= applycal
b2n_apl_gsmcalibtarget.argument.applycal.correction    	= gain
b2n_apl_gsmcalibtarget.argument.applycal.parmdb        	= b2n_cal_parmmapinst.output.mapfile



# generate mapfile with the parmDBs that were created by BBS in the gsmcalibtarget step
#gsmcal_parmmap.control.kind               =  plugin
#gsmcal_parmmap.control.type               =  createMapfile
#gsmcal_parmmap.control.method             =  add_suffix_to_file
#gsmcal_parmmap.control.mapfile_in         =  dpppconcat.output.mapfile
#gsmcal_parmmap.control.add_suffix_to_file =  /instrument_directionindependent
#gsmcal_parmmap.control.mapfile_dir        =  input.output.mapfile_dir
#gsmcal_parmmap.control.filename           =  gsmcal_parmdbs.mapfile

########################################################################


# plot the phase solutions from the phase-only calibration of the target
plot_gsm_phases.control.kind               =  recipe
plot_gsm_phases.control.type               =  executable_args
plot_gsm_phases.control.executable         =  {{ plotphases_script }}
plot_gsm_phases.control.max_per_node       =  24
#plot_gsm_phases.control.mapfiles_in        =  [gsmcal_parmmap.output.mapfile,dpppconcat.output.mapfile]
plot_gsm_phases.control.mapfiles_in        =  [b2n_cal_parmmapinst.output.mapfile,dpppconcat.output.mapfile]
plot_gsm_phases.control.inputkeys          =  [infile,outbase]
plot_gsm_phases.control.arguments          =  [-p,infile,outbase]

# make mapfile with the filenames of the results that we want
make_results_mapfile.control.kind            =  plugin
make_results_mapfile.control.type            =  makeResultsMapfile
make_results_mapfile.control.mapfile_dir     =  input.output.mapfile_dir
make_results_mapfile.control.filename        =  make_results_mapfile.mapfile
make_results_mapfile.control.mapfile_in      =  dpppconcat.output.mapfile
make_results_mapfile.control.target_dir      =  {{ results_directory }}
make_results_mapfile.control.make_target_dir =  True
make_results_mapfile.control.new_suffix      =  .pre-cal.ms

# move the results to where we want them
move_results.control.kind               =  recipe
move_results.control.type               =  executable_args
move_results.control.executable         =  /bin/mv
move_results.control.max_per_node       =  20                                 # feel free to adjust this value to match your system
move_results.control.mapfiles_in        =  [dpppconcat.output.mapfile, make_results_mapfile.output.mapfile]
move_results.control.inputkeys          =  [source,destination]
move_results.control.arguments          =  [source,destination]

# generate a mapfile of all the diagnostic plots
createmap_plots.control.kind            =   plugin
createmap_plots.control.type            =   createMapfile
createmap_plots.control.method          =   mapfile_from_folder
createmap_plots.control.mapfile_dir     =   input.output.mapfile_dir
createmap_plots.control.filename        =   diagnostic_plots.mapfile
createmap_plots.control.folder          =   input.output.working_directory/input.output.job_name
createmap_plots.control.pattern         =   *.png

# copy the diagnostic plots to the results_directory
copy_plots.control.kind               =  recipe
copy_plots.control.type               =  executable_args
copy_plots.control.executable         =  /bin/cp
copy_plots.control.max_per_node       =  20                                 # feel free to adjust this value to match your system
copy_plots.control.mapfile_in         =  createmap_plots.output.mapfile
copy_plots.control.inputkey           =  source
copy_plots.control.arguments          =  [source,{{ results_directory }}]
